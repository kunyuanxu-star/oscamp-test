name: auto-grading

on: [push]

env:
  CARGO_TERM_COLOR: always
  rust_toolchain: nightly

jobs:
  basic-test:
    if: github.repository != 'arceos-org/oscamp'
    runs-on: ubuntu-latest
    env:
      PATH: /opt/musl/aarch64-linux-musl-cross/bin:/opt/musl/riscv64-linux-musl-cross/bin:/opt/musl/x86_64-linux-musl-cross/bin:$HOME/.cargo/bin:$PATH
    outputs:
      basic_points: ${{ steps.basic_points.outputs.basic_points}}
      lab1_points: ${{ steps.lab1_points.outputs.lab1_points}}
    steps:
      - name: basic test check 
        uses: actions/checkout@v4
      # 通过pwd看出, 默认是在oscamp-test下执行, 也就是在仓库根目录执行
      # 当前目录 为仓库根目录

      - name: install dependencies
        run: |
          apt update && apt install -y \
            wget \
            xxd \
            curl \
            gcc \
            g++ \
            make \
            libclang-dev \
            qemu-system \
            bash \
            sudo \
            git \
            dosfstools \
            build-essential \
            pkg-config \
            libssl-dev \
            libz-dev \
            libclang-dev

          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          
          cargo install cargo-binutils

          mkdir -p /opt/musl && cd /opt/musl
          wget https://musl.cc/aarch64-linux-musl-cross.tgz
          wget https://musl.cc/riscv64-linux-musl-cross.tgz
          wget https://musl.cc/x86_64-linux-musl-cross.tgz
          tar zxf aarch64-linux-musl-cross.tgz
          tar zxf riscv64-linux-musl-cross.tgz
          tar zxf x86_64-linux-musl-cross.tgz
          qemu-system-riscv64 --version


      - name: Run basic
        id : basic_points
        run: |
          qemu-system-riscv64 --version
          pwd
          chmod -R +x scripts/
          
          ./scripts/total-test.sh > tmp.txt
          score=$(cat tmp.txt | tail -n1)
          echo $score
          rm tmp.txt -f
          echo "basic_points=$score" >> $GITHUB_OUTPUT

      - name: lab1 test check 
        uses: actions/checkout@v4
        with:
         ref: mosheng-ci-lab1
        # 通过pwd看出, 默认是在oscamp-test下执行, 也就是在仓库根目录执行
        # 当前目录 为仓库根目录
      - name: Run lab1
        id : lab1_points
        run: |
            chmod -R +x scripts/
            ./scripts/test-lab1.sh

      - name: debug ci
        run: | 
          echo "GITHUB_OUTPUT is $GITHUB_OUTPUT"
          cat $GITHUB_OUTPUT
  deploy:
    if: github.repository != 'arceos-org/oscamp'
    name: Report Score to Server
    needs:  basic-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (for consistency)
        uses: actions/checkout@v4

      - name : Deploy to pages
        env : 
          course_id: 1806
          post_api: https://api.opencamp.cn/web/api/courseRank/createByThirdToken
          token: fbee89b9866b46318cddeec86f99f331
          github_user: ${{ github.actor }}
          basic_score: ${{ needs.basic-test.outputs.basic_points }}
          lab1_score: ${{ needs.basic-test.outputs.lab1_points }}
        run : |
          echo "Basic: $basic_score"
          echo "Lab1: $lab1_score"

          total_score=600

          # 先上传基础试试

          score_json=$(jq -n \
            --arg channel "github" \
            --arg courseId "$course_id" \
            --arg name "$github_user" \
            --arg score "$basic_score" \
            --arg totalScore "$total_score" \
            --arg ext "{}" \
            '{channel: $channel, courseId: $courseId, name: $name, score: ($score | tonumber), totalScore: ($totalScore | tonumber), ext: $ext}')

          
          echo "提交的 JSON:"
          echo "$score_json"

          response=$(curl -X POST "$post_api" \
            -H "accept: application/json;charset=utf-8" \
            -H "Content-Type: application/json" \
            -H "token: $token" \
            -d "$score_json" \
            -s)

          echo "返回结果: $response"

          if echo "$response" | grep -q '"result":1'; then
            echo "成功：测试数据已发送"
          else
            echo "失败：接口返回异常"
            exit 1
          fi

  # deploy:
  #   if: github.repository != 'arceos-org/oscamp'
  #   name: Deploy to pages
  #   needs: basic-test
  #   runs-on: ubuntu-latest
  #   steps:
  #    - name: Checkout repository
  #      uses: actions/checkout@v4
    #   steps:
      #     - uses: actions/checkout@v3
      #       continue-on-error: true
      #       with:
        #         ref: 'gh-pages'
        #     - name: Save Log File
        #       uses: yfblock/multi-rank-log@main
        #       with:
          #         public-dir: classroom
          #         points: ${{ needs.basic-test.outputs.points }}
          #     - name: GitHub Pages
          #       uses: crazy-max/ghaction-github-pages@v3
          #       with:
            #         target_branch: gh-pages
            #         build_dir: ./classroom
            #         keep_history: true
            #       env:
              #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              #     - name: check score
              #       env:
                #         course_id: ${{ secrets.RCORE_2025_SPRING_COURSE_ID }}
                #         post_api: ${{ secrets.RCORE_2025_SPRING_POST_API }}
                #         token: ${{ secrets.RCORE_2025_SPRING_TOKEN }}
                #       run: |
                #         score=$(( $(grep -o 'ch' classroom/latest.json | wc -l) * 100))
                #         cat classroom/latest.json
                #         echo $score
                
                #         github_user="${{ github.actor }}"
                
                #         # 生成 JSON 结果
                #         score_json=$(jq -n \
                #           --arg channel "github" \
                #           --argjson courseId "$course_id" \
                #           --arg name "$github_user" \
                #           --argjson score "$score" \
                #           --argjson totalScore 500 \
                #           '{channel: $channel, courseId: $courseId, name: $name, score: $score, totalScore: $totalScore}')
                
                #           response=$(curl -X POST $post_api \
                #           -H "accept: application/json;charset=utf-8" \
                #           -H "Content-Type: application/json" \
                #           -H "token: $token" \
                #           -d "$score_json" \
                #           -v)
                
                #           echo "Response: $response"
                
                #           if echo "$response" | grep -q '"result":1'; then
                #           echo "Success: The result field contains 1."
                #           else
                #           echo "Error: The result field does not contain 1."
                #           exit 1
                #           fi
                
                #   permissions: write-all